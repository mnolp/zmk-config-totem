//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        delete {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 18>;
        };
    };

    behaviors {
        hold: hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            require-prior-idle-ms = <50>;
            tapping-term-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
         &kp Q  &kp W  &kp F      &kp P  &kp B      &kp J      &kp L  &kp U      &kp Y    &kp SEMI
         &kp A  &kp R  &kp S      &kp T  &kp G      &kp M      &kp N  &kp E      &kp I    &kp O
&kp TAB  &kp X  &kp C  &kp D      &kp V  &kp Z      &kp K      &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp SQT
                       &kp LSHFT  &mo 2  &kp RET    &kp SPACE  &mo 1  &kp RSHFT
            >;
        };

        layer_1 {
            bindings = <
        &trans     &trans     &trans     &trans     &trans       &kp PG_UP  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp DEL
        &trans     &trans     &trans     &trans     &kp CAPS     &trans     &kp LEFT      &kp DOWN  &kp RIGHT      &kp LC(BSPC)
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)    &kp PG_DN  &kp HOME      &trans    &kp END        &trans        &trans
                              &trans     &mo 3      &trans       &trans     &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
            &kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0
            &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)
&kp ESCAPE  &kp EQUAL     &kp MINUS   &kp LS(PLUS)   &kp LS(LBRC)  &kp LS(RBRC)     &kp LBKT       &kp RBKT      &trans        &trans        &trans        &kp N0
                                      &trans         &trans        &trans           &trans         &mo 3         &trans
            >;
        };

        layer_3 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        delete {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 18>;
        };
    };

    behaviors {
        hold: hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            require-prior-idle-ms = <50>;
            tapping-term-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
         &kp Q  &kp W  &kp F      &kp P  &kp B      &kp J      &kp L  &kp U      &kp Y    &kp SEMI
         &kp A  &kp R  &kp S      &kp T  &kp G      &kp M      &kp N  &kp E      &kp I    &kp O
&kp TAB  &kp X  &kp C  &kp D      &kp V  &kp Z      &kp K      &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp SQT
                       &kp LSHFT  &mo 2  &kp RET    &kp SPACE  &mo 1  &kp RSHFT
            >;
        };

        layer_1 {
            bindings = <
        &trans     &trans     &trans     &trans     &trans       &trans  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp DEL
        &trans     &trans     &trans     &trans     &trans       &trans  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LC(BSPC)
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)    &trans  &kp HOME      &trans    &kp END        &trans        &trans
                              &trans     &mo 3      &trans       &trans  &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
            &kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6         &kp N7        &kp N8        &kp N9         &kp N0
            &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)   &kp LS(RPAR)
&kp ESCAPE  &kp EQUAL     &kp MINUS   &kp LS(PLUS)   &kp LS(LBRC)  &kp LS(RBRC)     &kp LBKT       &kp RBKT      &kp GRAVE     &kp LS(TILDE)  &kp BSLH      &kp N0
                                      &trans         &trans        &trans           &trans         &mo 3         &trans
            >;
        };

        layer_3 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
